pipeline {
    agent any
    environment {
        DOCKER_CREDENTIALS_ID = '53c0e6f0-2c1e-43b2-a1a1-3d3e56fd1cae'
        GITLAB_CREDENTIALS_ID = '2f379a74-002d-471d-a051-6bd615828532'
        SSH_KEY='f7745d84-3b92-4a34-9da8-ab8b48c2f6bf'
    }
    stages {
        stage('Checkout or Update Code'){
            steps {
                git url: 'https://lab.ssafy.com/s11-bigdata-dist-sub1/S11P21B109.git', branch: 'master', credentialsId: env.GITLAB_CREDENTIALS_ID
                // script {
                //     sshagent (credentials: [env.SSH_KEY]) {
                //         sh '''
                //             TARGET_DIR="/home/ubuntu/j11b109"

                //             cd $TARGET_DIR

                //             if [ ! -d ".git" ]; then
                //                 echo "Repository does not exist. Initializing sparse-checkout ..."
                //                 git init
                //                 git remote add origin https://lab.ssafy.com/s11-bigdata-dist-sub1/S11P21B109.git
                //                 git config core.sparseCheckout true
                //                 echo "docker-compose.ec2.yml" >> .git/info/sparse-checkout
                //                 git pull origin master
                //             else
                //                 echo "Repository existss. Pulling latest changes for docker-compose.ec2.yml ..."
                //                 git pull origin master
                //             fi
                //         '''
                //     }
                // }
            }
        }
        
        stage ('Build Backend Images') {
            steps {
                echo 'Building Backend Docker Images ...'
                script { 
                    // Build spring image
                    dir('backend/spring') {
                        sh 'chmod +x gradlew'
                        sh './gradlew clean build --build-cache -x test'
                        sh 'docker build -t happyyongku/j11b109:spring .'
                    }
                    // Build fastapi image
                    dir('backend/fastapi_ec2') {
                        sh 'docker build -t happyyongku/j11b109:fastapi .'
                    }
                }
            }
        }
        stage('Build Frontend images') {
            steps {
                echo 'Build Frontend Docker Images ...'
                script {
                    //Build Frontend Images
                    dir('frontend/here_law') {
                        sh 'npm install'
                        sh 'npm run build'
                        sh 'docker build -t happyyongku/j11b109:react .'
                    }
                }
            }
        }
        stage('Build Nginx images') {
            steps {
                script {
                    dir('nginx') {
                        sh 'docker build -t happyyongku/j11b109:nginx .'
                    }
                }
            }
        }
        // stage('Test') {
        //     steps {
        //         script {
        //             sh 'docker-compose -f docker-compose.ec2.yml up --abort-on-container-exit'
        //             sh 'docker-compose -f docker-compose.ec2.yml down'
        //         }
        //     }
        // }
        stage('Push Images to DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                        sh 'docker push happyyongku/j11b109:react'
                        sh 'docker push happyyongku/j11b109:spring'
                        sh 'docker push happyyongku/j11b109:fastapi'
                        sh 'docker push happyyongku/j11b109:nginx'
                        echo 'Push Docker hub'
                    }
                }
            }
        }
        stage('Deploy EC2 and NGINX') {
            steps {
                script {
                    echo 'Deploying EC2 and NGINX ...'
                    sshagent (credentials: [env.SSH_KEY]) {
                        echo 'Check SSH -------------------------------------------'
                        sh 'ssh-add -l'
                        sh 'ssh -o StrictHostKeyChecking=no ubuntu@j11b109.p.ssafy.io "cd /home/ubuntu/j11b109 && docker-compose -f docker-compose.ec2.yml up -d --build nginx"'
                    }
                }
            }
        }
    }
    post {
        success {
            echo 'Successful Built and Deployed'
            sh 'echo "successed yongku"'
        }
        failure {
            echo 'Build or Deployment failed'
        }
    }
}