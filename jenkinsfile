pipeline {
    agent any
    environment {
        DOCKER_CREDENTIALS_ID = '53c0e6f0-2c1e-43b2-a1a1-3d3e56fd1cae'
        GITLAB_CREDENTIALS_ID = '2f379a74-002d-471d-a051-6bd615828532'
        SSH_KEY='f7745d84-3b92-4a34-9da8-ab8b48c2f6bf'
    }
    stages {
        stage('Checkout or Update Code'){
            steps {
                git url: 'https://lab.ssafy.com/s11-bigdata-dist-sub1/S11P21B109.git', branch: 'master', credentialsId: env.GITLAB_CREDENTIALS_ID
            }
        }
        stage('Copy docker-compose File to EC2') {
            steps {
                script {
                    sshagent (credentials: [env.SSH_KEY]) {
                        sh 'scp -o StrictHostKeyChecking=no docker-compose-ec2.yml ubuntu@j11b109.p.ssafy.io:/home/ubuntu/j11b109/docker-compose-ec2.yml'
                        sh 'scp -o StrictHostKeyChecking=no nginx/nginx.conf ubuntu@j11b109.p.ssafy.io:/home/ubuntu/j11b109/nginx/nginx.conf'
                    }
                }
            }
        }
        stage('Create .env') {
            steps {
                script{
                    sh '''
                        pwd
                        echo DB_DOMAIN=$DB_DOMAIN > .env || echo "Failed to create .env"
                        echo DB_PORT=$DB_PORT >> .env || echo "Failed to append DB_PORT"
                        echo DB_PORT_FASTAPI=$DB_PORT_FASTAPI >> .env
                        echo DB_NAME=$DB_NAME >> .env
                        echo DB_USERNAME=$DB_USERNAME >> .env
                        echo DB_PASSWORD=$DB_PASSWORD >> .env

                        ls /var/jenkins_home/workspace/J11B109_pipeline
                        ls -la
                    '''
                }
            }
        }
        stage ('Build Backend Images') {
            steps {
                echo 'Building Backend Docker Images ...'
                script { 
                    // Build spring image
                    dir('backend/spring') {
                        sh 'chmod +x gradlew'
                        // sh './gradlew clean build --build-cache'
                        // sh './gradlew clean build --build-cache -x test'
                        sh 'docker build -t happyyongku/j11b109:spring .'
                    }
                    // Build fastapi image
                    dir('backend/fastapi_ec2') {
                        sh 'docker build -t happyyongku/j11b109:fastapi .'
                    }
                }
            }
        }
        stage('Build Frontend images') {
            steps {
                echo 'Build Frontend Docker Images ...'
                script {
                    //Build Frontend Images
                    dir('frontend/here_law') {
                        // sh 'npm install'
                        // sh 'npm run build'
                        sh 'docker build -t happyyongku/j11b109:react .'
                    }
                }
            }
        }
        stage('Build Nginx images') {
            steps {
                script {
                    dir('nginx') {
                        sh 'docker build -t happyyongku/j11b109:nginx .'
                    }
                }
            }
        }
        stage('Build postgreSQL images') {
            steps {
                script {
                    dir('DB') {
                        sh 'docker build -t happyyongku/j11b109:postgres .'
                    }
                }
            }
        }
        
        stage('Push Images to DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                        sh 'docker push happyyongku/j11b109:react'
                        sh 'docker push happyyongku/j11b109:spring'
                        sh 'docker push happyyongku/j11b109:fastapi'
                        sh 'docker push happyyongku/j11b109:nginx'
                        sh 'docker push happyyongku/j11b109:postgres'
                        echo 'Push Docker hub'
                    }
                }
            }
        }
        stage('Deploy EC2 and NGINX') {
            steps {
                script {
                    echo 'Deploying EC2 and NGINX ...'
                    sshagent (credentials: [env.SSH_KEY]) {
                        sh '''
                            ssh -o StrictHostKeyChecking=no ubuntu@j11b109.p.ssafy.io "cd /home/ubuntu/j11b109 &&
                            echo "shutting down old containers" &&
                            docker-compose -f docker-compose-ec2.yml down &&
                            echo "start pull" &&
                            docker-compose -f docker-compose-ec2.yml pull &&
                            echo "start up" &&
                            docker-compose --env-file .env -f docker-compose-ec2.yml up -d" &&
                            echo "print env" &&
                            env | grep DB_
                        '''
                    }
                }
            }
        }
    }
    post {
        success {
            echo 'Successful Built and Deployed'
            sh 'echo "successed yongku"'
        }
        failure {
            echo 'Build or Deployment failed'
        }
    }
}